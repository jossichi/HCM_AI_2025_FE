import { useState } from "react";
import styles from "../../assets/chatcard.module.scss";
import { motion, AnimatePresence } from "framer-motion"; // Th√™m AnimatePresence

// === Helpers (Gi·ªØ nguy√™n) ===
const getVideoUrlWithTimestamp = (videoName, timestamp) => {
  const videoUrl = `http://localhost:8000/video/${videoName}.mp4`;
  return `${videoUrl}#t=${timestamp}`;
};

const decodeFrameHashToImage = (frameHash, videoName) => {
  if (!frameHash || !videoName) return null;
  if (frameHash.startsWith("data:image")) {
    return frameHash;
  }
  const cleanFrameName = frameHash.replace(/\.jpg$/i, "");
  return `http://localhost:8000/frames/${videoName}/${cleanFrameName}.jpg`;
};

// === Component ch√≠nh ===
const ChatCard = ({ result }) => {
  const [activeTab, setActiveTab] = useState("ocr");
  // NEW: State ƒë·ªÉ qu·∫£n l√Ω vi·ªác hi·ªÉn th·ªã video
  const [isVideoVisible, setIsVideoVisible] = useState(false);

  const frameSrc = decodeFrameHashToImage(result.frame_name, result.video_name);
  const videoUrl = getVideoUrlWithTimestamp(
    result.video_name,
    result.timestamp
  );

  // NEW: H√†m ƒë·ªÉ b·∫≠t/t·∫Øt video
  const toggleVideoPlayer = () => {
    setIsVideoVisible(!isVideoVisible);
  };

  // ... (C√°c component con OcrTab, ObjectsTab, AudioTab gi·ªØ nguy√™n) ...
  const OcrTab = () => (
    <div className={styles.tabContent}>
      {Array.isArray(result.ocr_texts) && result.ocr_texts.length > 0 ? (
        <ul className={styles.dataList}>
          {result.ocr_texts.map((t, i) => (
            <li key={i}>
              <span className={styles.dataText}>"{t.text}"</span>
              <span className={styles.dataConfidence}>
                ƒê·ªô ch√≠nh x√°c: {(t.confidence * 100).toFixed(0)}%
              </span>
            </li>
          ))}
        </ul>
      ) : (
        <p className={styles.noData}>Kh√¥ng t√¨m th·∫•y vƒÉn b·∫£n.</p>
      )}
    </div>
  );

  const ObjectsTab = () => (
    <div className={styles.tabContent}>
      {Array.isArray(result.objects) && result.objects.length > 0 ? (
        <ul className={styles.dataList}>
          {result.objects.map((obj, i) => (
            <li key={i}>
              <span className={styles.dataLabel}>{obj.label}</span>
              <div className={styles.confidenceBar}>
                <div
                  style={{ width: `${obj.confidence * 100}%` }}
                  className={styles.confidenceFill}
                />
              </div>
              <span className={styles.dataConfidence}>
                {(obj.confidence * 100).toFixed(0)}%
              </span>
            </li>
          ))}
        </ul>
      ) : (
        <p className={styles.noData}>Kh√¥ng ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng n√†o.</p>
      )}
    </div>
  );

  const AudioTab = () => (
    <div className={styles.tabContent}>
      <p className={styles.audioText}>
        {result.audio_text || "Kh√¥ng c√≥ n·ªôi dung √¢m thanh t·∫°i th·ªùi ƒëi·ªÉm n√†y."}
      </p>
    </div>
  );

  return (
    <motion.div
      className={styles.chatCard}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4 }}>
      <div className={styles.avatar}>ü§ñ</div>

      {/* NEW: Th√™m m·ªôt div b·ªçc ngo√†i ƒë·ªÉ qu·∫£n l√Ω layout d·ªçc */}
      <div className={styles.mainContent}>
        {/* Container 2 c·ªôt hi·ªán t·∫°i */}
        <div className={styles.cardContainer}>
          {/* === C·ªòT TR√ÅI: H√åNH ·∫¢NH === */}
          <div className={styles.visualColumn}>
            {frameSrc && (
              <img
                src={frameSrc}
                alt="Matching frame"
                className={styles.frameImage}
                loading="lazy"
                onClick={toggleVideoPlayer} // Nh·∫•n v√†o ·∫£nh c≈©ng c√≥ th·ªÉ m·ªü video
                title="Nh·∫•n ƒë·ªÉ xem video"
              />
            )}
          </div>

          {/* === C·ªòT PH·∫¢I: TH√îNG TIN === */}
          <div className={styles.infoColumn}>
            {/* --- Ph·∫ßn t√≥m t·∫Øt --- */}
            <div className={styles.summarySection}>
              <p className={styles.summaryItem}>
                üé¨ <strong>Video:</strong> {result.video_name}
              </p>
              <p className={styles.summaryItem}>
                ‚è±Ô∏è <strong>Th·ªùi gian:</strong>{" "}
                {result.timestamp?.toFixed(2) ?? "N/A"}s
              </p>
              <p className={styles.summaryItem}>
                üéØ <strong>T∆∞∆°ng ƒë·ªìng:</strong>{" "}
                {result.score?.toFixed(2) ?? "N/A"}
              </p>
              {/* NEW: N√∫t ƒë·ªÉ m·ªü/ƒë√≥ng video player */}
              <button
                onClick={toggleVideoPlayer}
                className={styles.watchVideoButton}>
                {isVideoVisible ? "·∫®n Video" : "‚ñ∂Ô∏è Xem Video"}
              </button>
            </div>

            {/* --- Ph·∫ßn Tabs --- */}
            <div className={styles.tabs}>
              {/* ... (C√°c n√∫t tab gi·ªØ nguy√™n) ... */}
              <button
                className={`${styles.tabButton} ${
                  activeTab === "ocr" ? styles.active : ""
                }`}
                onClick={() => setActiveTab("ocr")}>
                üìù VƒÉn b·∫£n (OCR)
              </button>
              <button
                className={`${styles.tabButton} ${
                  activeTab === "objects" ? styles.active : ""
                }`}
                onClick={() => setActiveTab("objects")}>
                üßç ƒê·ªëi t∆∞·ª£ng
              </button>
              <button
                className={`${styles.tabButton} ${
                  activeTab === "audio" ? styles.active : ""
                }`}
                onClick={() => setActiveTab("audio")}>
                üîä √Çm thanh
              </button>
            </div>

            {/* --- N·ªôi dung c·ªßa Tab --- */}
            {activeTab === "ocr" && <OcrTab />}
            {activeTab === "objects" && <ObjectsTab />}
            {activeTab === "audio" && <AudioTab />}
          </div>
        </div>

        {/* NEW: Khu v·ª±c hi·ªÉn th·ªã Video Player */}
        <AnimatePresence>
          {isVideoVisible && (
            <motion.div
              className={styles.videoPlayerSection}
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              transition={{ duration: 0.3, ease: "easeInOut" }}>
              <video
                className={styles.videoPlayer}
                src={videoUrl}
                controls
                autoPlay
                muted // N√™n muted ƒë·ªÉ kh√¥ng l√†m phi·ªÅn ng∆∞·ªùi d√πng
                playsInline
                poster={frameSrc} // Hi·ªÉn th·ªã frame trong l√∫c video t·∫£i
              />
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </motion.div>
  );
};

export default ChatCard;
